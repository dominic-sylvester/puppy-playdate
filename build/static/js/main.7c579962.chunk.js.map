{"version":3,"sources":["graphQLUtils.js","WelcomeScreen.js","PuppyCard.js","SwipeButtons.js","TinderSwipe.js","App.js","serviceWorker.js","index.js"],"names":["fetchGraphQL","operationsDoc","operationName","variables","a","fetch","method","headers","body","JSON","stringify","query","result","json","useStyles","makeStyles","theme","root","width","margin","button","marginTop","spacing","WelcomeScreen","handleGetStartedClick","classes","className","Button","variant","color","onClick","maxWidth","textAlign","height","boxShadow","display","flexDirection","media","cardContent","justifyContent","flexGrow","bio","marginBottom","PuppyCard","puppy","fetchPuppyData","swipe","Card","CardMedia","image","process","profilePic","title","name","CardContent","Typography","gutterBottom","component","age","interests","join","swipeButtonsContainer","alignItems","padding","SwipeButtons","Tooltip","aria-label","arrow","Fab","cardContainer","position","swipeCard","alreadyRemoved","TinderSwipe","puppyData","childRefs","useMemo","Array","length","fill","map","i","React","createRef","dir","console","log","cardsLeft","filter","includes","id","toBeRemoved","index","indexOf","push","current","key","onSwipe","direction","nameToDelete","onCardLeftScreen","ref","header","headerText","paddingLeft","paddingRight","App","useState","setPuppyData","showWelcomeScreen","setShowWelcomeScreen","useCallback","errors","data","error","queryPuppy","sort","puppyA","puppyB","useEffect","Container","loadingContainer","CircularProgress","size","loadingText","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7c579962.chunk.js","sourcesContent":["// Main generic GraphQL request\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  const result = await fetch(\n    'https://puppy-playdate.us-west-2.aws.cloud.dgraph.io/graphql',\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: operationsDoc,\n        operationName,\n        variables,\n      }),\n    }\n  )\n\n  return await result.json()\n}\n\n// Fetch all puppies\nconst fetchAllPuppiesOperationsDoc = `\n  query FetchAllPuppies {\n    queryPuppy {\n      id\n      name\n      age\n      matched\n      profilePic\n      bio\n      interests\n    }\n  }\n`\n\nexport function fetchAllPuppies() {\n  return fetchGraphQL(fetchAllPuppiesOperationsDoc, 'FetchAllPuppies', {})\n}\n\n// Update the puppy matched status\nconst updatePuppyMatchedStatusOperationsDoc = (puppyId, newIsMatchedValue) => `\n  mutation UpdatePuppyMatchedStatus {\n    updatePuppy(input: { filter: { id: [\"${puppyId}\"] }, set: { matched: ${newIsMatchedValue} } }) {\n      puppy {\n        id\n        name\n        age\n        matched\n        profilePic\n        bio\n        interests\n      }\n    }\n  }\n`\n\nexport function updatePuppyMatchedStatus(puppyId, newIsMatchedValue) {\n  return fetchGraphQL(\n    updatePuppyMatchedStatusOperationsDoc(puppyId, newIsMatchedValue),\n    'UpdatePuppyMatchedStatus',\n    {}\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '50%',\n    margin: 'auto',\n  },\n  button: {\n    marginTop: theme.spacing(4),\n  },\n}))\n\nexport const WelcomeScreen = ({ handleGetStartedClick }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <p>\n        Every dog owner wants to find the perfect friends for their new puppy.\n        Now we have an app for that!\n      </p>\n      <p>\n        Browse through various puppy profiles and swipe right or left to find\n        your new puppy friend.\n      </p>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        onClick={handleGetStartedClick}\n      >\n        Get Started\n      </Button>\n    </div>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport FavoriteIcon from '@material-ui/icons/Favorite'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Fab from '@material-ui/core/Fab'\n\nimport { updatePuppyMatchedStatus } from './graphQLUtils'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: '100%',\n    textAlign: 'left',\n    height: theme.spacing(80),\n    boxShadow: 'rgba(50, 50, 50, 0.08) 6px 8px 10px -3px',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  media: {\n    height: theme.spacing(50),\n  },\n  cardContent: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    flexGrow: 1,\n  },\n  bio: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nexport function PuppyCard({ puppy, fetchPuppyData, swipe }) {\n  const classes = useStyles()\n\n  const handleMatchedChange = async () => {\n    const { errors } = await updatePuppyMatchedStatus(puppy.id, !puppy.matched)\n\n    if (errors) {\n      console.error(errors)\n    }\n\n    // Re-fetching all the data to make the top-level app aware of the data change.\n    // This was especially important in getting it to remove a puppy from the UI\n    // when the Captured filter was selected and then a previously captured puppy\n    // was toggled to no longer be captured.\n    fetchPuppyData()\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardMedia\n        className={classes.media}\n        image={`${process.env.PUBLIC_URL}/${puppy.profilePic}`}\n        title={puppy.name}\n      />\n      <div className={classes.cardContent}>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {puppy.name}, {puppy.age}\n          </Typography>\n          <Typography\n            variant=\"body1\"\n            color=\"textSecondary\"\n            component=\"p\"\n            className={classes.bio}\n          >\n            {puppy.bio}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            <b>Interests:</b> {puppy.interests?.join(', ')}\n          </Typography>\n        </CardContent>\n      </div>\n    </Card>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport FavoriteIcon from '@material-ui/icons/Favorite'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Fab from '@material-ui/core/Fab'\n\nconst useStyles = makeStyles((theme) => ({\n  swipeButtonsContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'flex-end',\n    width: '100%',\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1),\n  },\n}))\n\nexport const SwipeButtons = ({ swipe }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.swipeButtonsContainer}>\n      <Tooltip title=\"No thanks...\" aria-label=\"No thanks...\" arrow>\n        <Fab\n          aria-label=\"No thanks...\"\n          color=\"secondary\"\n          onClick={() => swipe('left')}\n        >\n          <CloseIcon />\n        </Fab>\n      </Tooltip>\n      <Tooltip title=\"Yes!\" aria-label=\"Yes!\" arrow>\n        <Fab aria-label=\"Yes!\" color=\"primary\" onClick={() => swipe('right')}>\n          <FavoriteIcon />\n        </Fab>\n      </Tooltip>\n    </div>\n  )\n}\n","import React, { useMemo } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TinderCard from 'react-tinder-card'\n\nimport { PuppyCard } from './PuppyCard'\nimport { SwipeButtons } from './SwipeButtons'\n\nconst useStyles = makeStyles((theme) => ({\n  cardContainer: {\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    margin: 'auto',\n    width: theme.spacing(75),\n    maxWidth: '100%',\n    height: theme.spacing(80),\n  },\n  swipeCard: {\n    position: 'absolute',\n    width: theme.spacing(75),\n    maxWidth: '100%',\n    height: theme.spacing(80),\n  },\n}))\n\nconst alreadyRemoved = []\n\nexport const TinderSwipe = ({ puppyData, fetchPuppyData }) => {\n  const classes = useStyles()\n\n  const childRefs = useMemo(\n    () =>\n      Array(puppyData.length)\n        .fill(0)\n        .map((i) => React.createRef()),\n    [puppyData.length]\n  )\n\n  const swiped = (direction, nameToDelete) => {\n    console.log(`swiped ${direction} on ${nameToDelete}`)\n  }\n\n  const outOfFrame = (name) => {\n    console.log(name + ' left the screen!')\n  }\n\n  const swipe = (dir) => {\n    console.log('swipe', dir)\n    const cardsLeft = puppyData.filter(\n      (puppy) => !alreadyRemoved.includes(puppy.id)\n    )\n    console.log(cardsLeft)\n    if (cardsLeft.length) {\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].id // Find the card object to be removed\n      console.log(toBeRemoved)\n\n      const index = puppyData.map((puppy) => puppy.id).indexOf(toBeRemoved) // Find the index of which to make the reference to\n      console.log(index)\n\n      alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      console.log(alreadyRemoved)\n\n      childRefs[index].current.swipe(dir) // Swipe the card!\n    }\n  }\n\n  return (\n    <div className={classes.cardContainer}>\n      {puppyData.map((puppy, index) => (\n        <TinderCard\n          className={classes.swipeCard}\n          key={puppy.id}\n          onSwipe={(dir) => swiped(dir, puppy.name)}\n          onCardLeftScreen={() => outOfFrame(puppy.name)}\n          ref={childRefs[index]}\n        >\n          <PuppyCard\n            puppy={puppy}\n            fetchPuppyData={fetchPuppyData}\n            swipe={swipe}\n          />\n        </TinderCard>\n      ))}\n      <SwipeButtons swipe={swipe} />\n    </div>\n  )\n}\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport PetsIcon from '@material-ui/icons/Pets'\n\nimport { fetchAllPuppies } from './graphQLUtils'\nimport { WelcomeScreen } from './WelcomeScreen'\nimport { TinderSwipe } from './TinderSwipe'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: 'center',\n    color: '#FFF',\n  },\n  header: {\n    marginTop: theme.spacing(6),\n    marginBottom: theme.spacing(6),\n  },\n  headerText: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n}))\n\nexport default function App() {\n  const classes = useStyles()\n  const [puppyData, setPuppyData] = React.useState(null)\n  const [showWelcomeScreen, setShowWelcomeScreen] = React.useState(true)\n\n  const fetchPuppyData = React.useCallback(async () => {\n    const { errors, data } = await fetchAllPuppies()\n\n    if (errors) {\n      console.error(errors)\n    }\n\n    const result = data.queryPuppy.sort((puppyA, puppyB) =>\n      puppyA.name > puppyB.name ? -1 : 1\n    )\n\n    setPuppyData(result)\n  }, [])\n\n  React.useEffect(() => {\n    fetchPuppyData()\n  }, [fetchPuppyData])\n\n  return (\n    <main className={classes.root}>\n      <Container>\n        <h1 className={classes.header}>\n          <PetsIcon />\n          <span className={classes.headerText}>Puppy Playdate</span>\n          <PetsIcon />\n        </h1>\n        {showWelcomeScreen ? (\n          <WelcomeScreen\n            handleGetStartedClick={() => setShowWelcomeScreen(false)}\n          />\n        ) : puppyData ? (\n          <TinderSwipe puppyData={puppyData} fetchPuppyData={fetchPuppyData} />\n        ) : (\n          <div className={classes.loadingContainer}>\n            <CircularProgress color=\"inherit\" size={60} />\n            <Typography className={classes.loadingText}>Loading</Typography>\n          </div>\n        )}\n      </Container>\n    </main>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}